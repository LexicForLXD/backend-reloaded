type Container {
  ID: String!
  host: Host
  hostID: String!
  source: ContianerSource
  createdAt: Timestamp
  updatedAt: Timestamp
  deletedAt: Timestamp
}

input ContainerReq {
  name: String!
  hostID: String
}

type ContianerSource {
  type: String
  certificate: String
  alias: String
  fingerprint: String
  properties: [String]
  server: String
  secret: String
  protocol: String
  source: String
  live: Boolean
  containerOnly: Boolean
  refresh: Boolean
  project: String
}

extend type Query {
  containers(hostID: String, limit: Int, offset: Int): [Container]!
  container(id: String!): Container
}

extend type Mutation {
  createContainer(containerReq: ContainerReq!): Container
  updateContainer(id: String!, containerReq: ContainerReq!): Container
  deleteContainer(id: String!): DeleteRes
}
